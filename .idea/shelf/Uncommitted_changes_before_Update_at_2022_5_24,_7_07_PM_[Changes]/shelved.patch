Index: src/view/Chessboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\n\nimport controller.ClickController;\nimport model.*;\nimport controller.GameController;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.sql.SQLOutput;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport static view.ChessGameFrame.*;\n\n\n/**\n * 这个类表示面板上的棋盘组件对象\n * 初始化棋盘\n * getChessComponents、getCurrentColor方法\n * putChessOnBoard(ChessComponent chessComponent)方法\n * 交换chessconponent,交换颜色方法\n * record\\getrecord\n * 数棋子点\n * loadGame\n * 重写paintComponent\n */\npublic class Chessboard extends JComponent {\n    /**\n     * CHESSBOARD_SIZE： 棋盘是8 * 8的\n     * <br>\n     * BACKGROUND_COLORS: 棋盘的两种背景颜色\n     * <br>\n     * chessListener：棋盘监听棋子的行动\n     * <br>\n     * chessboard: 表示8 * 8的棋盘\n     * <br>\n     * currentColor: 当前行棋方\n     */\n\n    static int x = 0;\n\n    public static void setX(int x) {\n        Chessboard.x = x;\n    }\n\n    private ChessGameFrame chessGameFrame;\n\n    public ChessGameFrame getChessGameFrame() {\n        return chessGameFrame;\n    }\n\n    public void setChessGameFrame(ChessGameFrame chessGameFrame) {\n        this.chessGameFrame = chessGameFrame;\n    }\n\n    private static final int CHESSBOARD_SIZE = 8;\n\n    private final ChessComponent[][] chessComponents = new ChessComponent[CHESSBOARD_SIZE][CHESSBOARD_SIZE];\n    public static ChessColor currentColor = ChessColor.WHITE;\n\n    public ClickController getClickController() {\n        return clickController;\n    }\n\n    //all chessComponents in this chessboard are shared only one model controller\n    private final ClickController clickController = new ClickController(this);\n    private final int CHESS_SIZE;\n    public static ArrayList<String> recordchessboard = new ArrayList<>();\n\n    public int getCHESS_SIZE() {\n        return CHESS_SIZE;\n    }\n\n    //    public boolean isDead = false;\n    public boolean isDeadw = false;\n    public boolean isDeadb = false;\n\n    public boolean staybk = true;\n    public boolean staywk = true;\n    public boolean staybr = true;\n    public boolean staywr = true;\n    public static int count = 0;\n\n    public Chessboard(int width, int height) {\n        setLayout(null); // Use absolute layout.\n        setSize(width, height);\n        CHESS_SIZE = width / 8;\n//        System.out.printf(\"chessboard size = %d, chess size = %d\\n\", width, CHESS_SIZE);\n        recordchessboard.add(\"R0N0B0Q0K0B0N0R0*P0P0P0P0P0P0P0P0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*p0p0p0p0p0p0p0p0*r0n0b0q0k0b0n0r0*w\");\n\n        initall();\n    }\n\n    public static void setCurrentColor(ChessColor currentColor) {\n        Chessboard.currentColor = currentColor;\n    }\n\n    public void initall() {\n        initiateEmptyChessboard();\n\n        // FIXME: Initialize chessboard for testing only.\n        initRookOnBoard(0, 0, ChessColor.BLACK);\n        initRookOnBoard(0, CHESSBOARD_SIZE - 1, ChessColor.BLACK);\n        initRookOnBoard(CHESSBOARD_SIZE - 1, 0, ChessColor.WHITE);\n        initRookOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 1, ChessColor.WHITE);\n\n        initKingOnBoard(0, CHESSBOARD_SIZE - 4, ChessColor.BLACK);\n        initKingOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 4, ChessColor.WHITE);\n\n        initBishopOnBoard(0, CHESSBOARD_SIZE / 8 * 2, ChessColor.BLACK);\n        initBishopOnBoard(0, CHESSBOARD_SIZE - 3, ChessColor.BLACK);\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 3, ChessColor.WHITE);\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE / 8 * 2, ChessColor.WHITE);\n\n        initQueenOnBoard(0, CHESSBOARD_SIZE - 5, ChessColor.BLACK);\n        initQueenOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 5, ChessColor.WHITE);\n\n        initKnightOnBoard(0, CHESSBOARD_SIZE - 7, ChessColor.BLACK);\n        initKnightOnBoard(0, CHESSBOARD_SIZE - 2, ChessColor.BLACK);\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 2, ChessColor.WHITE);\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 7, ChessColor.WHITE);\n        for (int i = 0; i < 8; i++) {\n            initPawnOnBoard(1, i, ChessColor.BLACK);\n            initPawnOnBoard(CHESSBOARD_SIZE - 2, i, ChessColor.WHITE);\n\n        }\n\n    }\n\n    public ChessComponent[][] getChessComponents() {\n        return chessComponents;\n    }\n\n    public static ChessColor getCurrentColor() {\n        return currentColor;\n    }\n\n    public void putChessOnBoard(ChessComponent chessComponent) {\n        int row = chessComponent.getChessboardPoint().getX(),\n                col = chessComponent.getChessboardPoint().getY();\n        if (chessComponents[row][col] != null) {\n            remove(chessComponents[row][col]);\n        }\n        add(chessComponents[row][col] = chessComponent);\n    }\n\n    public void swapChessComponents(ChessComponent chess1, ChessComponent chess2) {  //将死\n        // Note that chess1 has higher priority, 'destroys' chess2 if exists.\n\n        if (!(chess2 instanceof EmptySlotComponent)) {\n            remove(chess2);\n\n            if (chess2 instanceof KingChessComponent && chess2.getChessColor().equals(ChessColor.WHITE)) {\n                isDeadw = true;\n            } else if (chess2 instanceof KingChessComponent && chess2.getChessColor().equals(ChessColor.BLACK)) {\n                isDeadb = true;\n            }\n\n\n            add(chess2 = new EmptySlotComponent(chess2.getChessboardPoint(), chess2.getLocation(), clickController, CHESS_SIZE));\n        }\n        chess1.swapLocation(chess2);\n        int row1 = chess1.getChessboardPoint().getX(),\n                col1 = chess1.getChessboardPoint().getY();\n        chessComponents[row1][col1] = chess1;\n        int row2 = chess2.getChessboardPoint().getX(),\n                col2 = chess2.getChessboardPoint().getY();\n        chessComponents[row2][col2] = chess2;\n\n//        if (chess1 instanceof KingChessComponent && chess1.getChessColor().equals(ChessColor.BLACK)) {\n//            staybk = false;\n//        }\n//        if (chess1 instanceof KingChessComponent && chess1.getChessColor().equals(ChessColor.WHITE)) {\n//            staywk = false;\n//        }\n//        if (chess1 instanceof RookChessComponent && chess1.getChessColor().equals(ChessColor.BLACK)) {\n//            staybr = false;\n//        }\n//        if (chess1 instanceof RookChessComponent && chess1.getChessColor().equals(ChessColor.WHITE)) {\n//            staywr = false;\n//        }\n\n        if (chess1 instanceof PawnChessComponent) {\n            if (chess1.getChessColor() == ChessColor.BLACK && chess1.getChessboardPoint().getX() == 7) {\n                getChessGameFrame().chosen(chess1);\n            }\n            if (chess1.getChessColor() == ChessColor.WHITE && chess1.getChessboardPoint().getX() == 0) {\n                getChessGameFrame().chosen(chess1);\n            }\n        }\n\n        record(row1, col1, row2, col2);\n        AtomicInteger count = new AtomicInteger(0);\n        setN(count);\n        setX(0);\n        changelabel();\n        chess1.repaint();\n        chess2.repaint();\n        String warningw = \"Black win!\";\n        String warningb = \"White win!\";\n//            ChessGameFrame.dead(warningw);\n        if (isjiangsi()) {\n\n        }\n        if (isDeadw) {\n            dead2(warningw);\n            initall();\n            recordchessboard.clear();\n            recordchessboard.add(\"R0N0B0Q0K0B0N0R0*P0P0P0P0P0P0P0P0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*p0p0p0p0p0p0p0p0*r0n0b0q0k0b0n0r0*w\");\n\n            setCurrentColor(ChessColor.BLACK);\n            showwhite();\n            repaint();\n            isDeadw = false;\n        } else if (isDeadb) {\n            dead2(warningb);\n            initall();\n            recordchessboard.clear();\n            recordchessboard.add(\"R0N0B0Q0K0B0N0R0*P0P0P0P0P0P0P0P0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*_0_0_0_0_0_0_0_0*p0p0p0p0p0p0p0p0*r0n0b0q0k0b0n0r0*w\");\n\n            setCurrentColor(ChessColor.BLACK);\n            showwhite();\n            repaint();\n            isDeadb = false;\n\n        }\n\n    }\n\n\n    public boolean otherChessCanMoveTo(ChessComponent chess2) {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (!(chessComponents[i][j] instanceof EmptySlotComponent)) {\n                    ChessComponent chess1 = chessComponents[i][j];\n                    if (chess1.getChessColor() != chess2.getChessColor() && chess1.canMoveTo(chessComponents, chess2.getChessboardPoint())) {\n                        return true;\n                    }\n\n                }\n            }\n        }\n        return false;\n    }\n\n    public boolean kingCanMoveTo(ChessComponent king) {//king能挪走来躲避\n        int inix = king.getChessboardPoint().getX();\n        int iniy = king.getChessboardPoint().getY();\n        ChessComponent[][] cc = getChessComponents();\n        int finx1 = inix + 1;\n        int finx2 = inix - 1;\n        int finy1 = iniy + 1;\n        int finy2 = iniy - 1;\n        if ((inix < 0 || iniy - 1 > 7 || inix > 7 || iniy - 1 < 0) || !(cc[inix][iniy - 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix][iniy - 1].getChessColor() || otherChessCanMoveTo(cc[inix][iniy - 1])) {\n            return false;\n        }\n        if ((inix < 0 || iniy + 1 > 7 || inix > 7 || iniy + 1 < 0) || !(cc[inix][iniy + 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix][iniy + 1].getChessColor() || otherChessCanMoveTo(cc[inix][iniy + 1])) {\n            return false;\n        }\n        if ((inix - 1 < 0 || iniy > 7 || inix - 1 > 7 || iniy < 0) || !(cc[inix - 1][iniy] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix - 1][iniy].getChessColor() || otherChessCanMoveTo(cc[inix - 1][iniy])) {\n            return false;\n        }\n        if (inix + 1 < 0 || iniy > 7 || inix + 1 > 7 || iniy < 0 || !(cc[inix + 1][iniy] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix + 1][iniy].getChessColor() || otherChessCanMoveTo(cc[inix + 1][iniy])) {\n            return false;\n        }\n        if (iniy + 1 > 7 || inix + 1 > 7 || iniy + 1 < 0 || !(cc[inix + 1][iniy + 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix + 1][iniy + 1].getChessColor() || otherChessCanMoveTo(cc[inix + 1][iniy + 1])) {\n            return false;\n        }\n        if (inix - 1 < 0 || iniy + 1 > 7 || inix - 1 > 7 || iniy + 1 < 0 || !(cc[inix - 1][iniy + 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix - 1][iniy + 1].getChessColor() || otherChessCanMoveTo(cc[inix - 1][iniy + 1])) {\n            return false;\n        }\n        if (inix + 1 < 0 || iniy - 1 > 7 || inix + 1 > 7 || iniy - 1 < 0 || !(cc[inix + 1][iniy - 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix + 1][iniy - 1].getChessColor() || otherChessCanMoveTo(cc[inix + 1][iniy - 1])) {\n            return false;\n        }\n        if (inix - 1 < 0 || iniy - 1 > 7 || inix - 1 > 7 || iniy - 1 < 0 || !(cc[inix - 1][iniy - 1] instanceof EmptySlotComponent) || king.getChessColor() == cc[inix - 1][iniy - 1].getChessColor() || otherChessCanMoveTo(cc[inix - 1][iniy - 1])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public boolean isjiangsi() {\n\n        ChessComponent chess;\n        ChessComponent king;\n        //        ChessComponent[][] chessComponentw = new ChessComponent[8][8];\n//        ChessComponent[][] chessComponent2 = new ChessComponent[8][8];\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                if (chessComponents[i][j] instanceof KingChessComponent) {\n                    king = chessComponents[i][j];\n                    for (int k = 0; k < 8; k++) {\n                        for (int l = 0; l < 8; l++) {\n                            if (!(chessComponents[k][l] instanceof EmptySlotComponent)) {\n                                chess = chessComponents[k][l];\n                                //不同颜色，有棋子可以移动到王那里；没有棋子可以吃掉这个攻击的棋子；王能走的位置都有棋子可以到达\n//                                if (chess.getChessColor() != king.getChessColor() && chess.canMoveTo(chessComponents, king.getChessboardPoint())){\n//                                    return true;\n//                                }\n                                if (chess.getChessColor() != king.getChessColor() && chess.canMoveTo(chessComponents, king.getChessboardPoint()) && king.getChessColor() == ChessColor.BLACK) {\n                                    dead(\"The black king is in danger!\");\n\n//                                    if (!otherChessCanMoveTo(chess) && !kingCanMoveTo(king) && king.getChessColor() == ChessColor.BLACK) {\n//\n                                    return true;\n//                                    }\n                                } else if (chess.getChessColor() != king.getChessColor() && chess.canMoveTo(chessComponents, king.getChessboardPoint()) && king.getChessColor() == ChessColor.WHITE) {\n                                    dead(\"The white king is in danger!\");\n\n//                                    if (!otherChessCanMoveTo(chess) && !kingCanMoveTo(king) && king.getChessColor() == ChessColor.BLACK) {\n//\n                                    return true;\n//                                    }\n                                }\n\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n\n    private void record(int fromx, int fromy, int tox, int toy) {\n        StringBuilder str = new StringBuilder();\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                ChessComponent m = chessComponents[i][j];\n                if (m instanceof RookChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"R\");\n                        if (!staybr) {\n                            str.append(\"1\");\n                        }\n                        if (staybr) {\n                            str.append(\"0\");\n                        }\n                    } else {\n                        str.append(\"r\");\n                        if (!staywr) {\n                            str.append(\"1\");\n                        }\n                        if (staywr) {\n                            str.append(\"0\");\n                        }\n\n                    }\n                }\n\n\n                if (m instanceof KingChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"K\");\n                        if (!staybk) {\n                            str.append(\"1\");\n                        }\n                        if (staybk) {\n                            str.append(\"0\");\n                        }\n                    } else {\n                        str.append(\"k\");\n                        if (!staywk) {\n                            str.append(\"1\");\n                        }\n                        if (staywk) {\n                            str.append(\"0\");\n                        }\n\n                    }\n                }\n                if (m instanceof BishopChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"B\");\n                        str.append(\"0\");\n                    } else {\n                        str.append(\"b\");\n                        str.append(\"0\");\n\n                    }\n                }\n                if (m instanceof KnightChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"N\");\n                        str.append(\"0\");\n                    } else {\n                        str.append(\"n\");\n                        str.append(\"0\");\n\n                    }\n                }\n                if (m instanceof PawnChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"P\");\n                        str.append(\"0\");\n                    } else {\n                        str.append(\"p\");\n                        str.append(\"0\");\n\n                    }\n                }\n                if (m instanceof QueenChessComponent) {\n                    if (m.getChessColor().equals(ChessColor.BLACK)) {\n                        str.append(\"Q\");\n                        str.append(\"0\");\n                    } else {\n                        str.append(\"q\");\n                        str.append(\"0\");\n\n                    }\n                }\n                if (m instanceof EmptySlotComponent) {\n                    str.append(\"_\");\n                    str.append(\"0\");\n\n                }\n\n\n            }\n            str.append(\"*\");\n        }\n        count++;\n        if (count % 2 == 1) {\n            str.append(\"w\");\n        } else {\n            str.append(\"b\");\n        }\n        recordchessboard.add(str.toString());\n    }\n\n    public static ArrayList<String> getRecordchessboard() {\n        return recordchessboard;\n    }\n\n\n    public void initiateEmptyChessboard() {\n        for (int i = 0; i < chessComponents.length; i++) {\n            for (int j = 0; j < chessComponents[i].length; j++) {\n                putChessOnBoard(new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE));\n            }\n        }\n    }\n\n    public void swapColor() {\n        currentColor = currentColor == ChessColor.BLACK ? ChessColor.WHITE : ChessColor.BLACK;\n    }\n\n    public void initRookOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new RookChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n    }\n\n    public void initQueenOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new QueenChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n//        chessComponent.chessboard = this;\n    }\n\n    public void initBishopOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new BishopChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n    }\n\n    public void initKingOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new KingChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n    }\n\n    public void initKnightOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new KnightChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n    }\n\n    public void initPawnOnBoard(int row, int col, ChessColor color) {\n        ChessComponent chessComponent = new PawnChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\n        chessComponent.setVisible(true);\n        putChessOnBoard(chessComponent);\n    }\n\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        ((Graphics2D) g).setStroke(new BasicStroke(4f));\n    }\n\n\n    protected Point calculatePoint(int row, int col) {\n        return new Point(col * CHESS_SIZE, row * CHESS_SIZE);\n    }\n\n    public void getLastChessBoard(int x) {//x从1开始递增\n        initiateEmptyChessboard();\n        for (int i = 0; i <= 119; i = i + 17) {\n            for (int j = i; j <= i + 15; j = j + 2) {\n                int end = getRecordchessboard().size();\n\n                if (getRecordchessboard().get(end - x).charAt(j) == 'B') {\n                    initBishopOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'K') {\n                    initKingOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'N') {\n                    initKnightOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'P') {\n                    initPawnOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'Q') {\n                    initQueenOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'R') {\n                    initRookOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'b') {\n                    initBishopOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'k') {\n                    initKingOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'n') {\n                    initKnightOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'p') {\n                    initPawnOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'q') {\n                    initQueenOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == 'r') {\n                    initRookOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                } else if (getRecordchessboard().get(end - x).charAt(j) == '_') {\n//                    chessComponents[i / 17][(j % 17) / 2] = new EmptySlotComponent(i / 17, (j % 17) % 2, getRecordchessboard().get(end - 1).charAt(j));\n                }\n            }\n        }\n    }\n\n    public void loadGame(List<String> chessData) {\n        int count = 0;\n        int cc = 0;\n        initiateEmptyChessboard();\n        if (!ChessGameFrame.file.getName().endsWith(\"txt\")) {\n            nottxt();\n            initiateEmptyChessboard();\n            repaint();\n        } else {\n            B:\n            while (true) {\n                int end = chessData.size();\n                if (chessData.get(end - 1).length() > 137) {//比137多一定非8*8\n                    noteight();\n                    initiateEmptyChessboard();\n                    repaint();\n                    break;\n                }\n                char a[] = new char[chessData.get(end - 1).length()];//共137个\n\n                for (int i = 0; i < chessData.get(end - 1).length(); i++) {//看有几个“*”来看是否8行\n                    if (chessData.get(end - 1).charAt(i) == '*') {\n                        count++;\n                    }\n//                if(chessData.get(end - 1).charAt(i) == '*'){\n//\n//                }\n                }\n                if (count != 8) {\n                    noteight();\n                    initiateEmptyChessboard();\n                    repaint();\n                    break;\n                }\n                A:\n                for (int i = 0; i <= 119; i = i + 17) {\n                    for (int j = i; j <= i + 15; j = j + 2) {\n                        if (chessData.get(end - 1).charAt(j) == 'B') {\n                            initBishopOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'K') {\n                            initKingOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'N') {\n                            initKnightOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'P') {\n                            initPawnOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'Q') {\n                            initQueenOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'R') {\n                            initRookOnBoard(i / 17, (j % 17) / 2, ChessColor.BLACK);\n                        } else if (chessData.get(end - 1).charAt(j) == 'b') {\n                            initBishopOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == 'k') {\n                            initKingOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == 'n') {\n                            initKnightOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == 'p') {\n                            initPawnOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == 'q') {\n                            initQueenOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == 'r') {\n                            initRookOnBoard(i / 17, (j % 17) / 2, ChessColor.WHITE);\n                        } else if (chessData.get(end - 1).charAt(j) == '_') {\n//                    chessComponents[i / 17][(j % 17) / 2] = new EmptySlotComponent(i / 17, (j % 17) % 2, chessData.get(end - 1).charAt(j));\n                        } else {//不是那些种类的棋子\n                            loadchesswrong();\n                            initiateEmptyChessboard();\n                            break B;\n                        }\n                        repaint();\n                    }\n                    if (chessData.get(end - 1).charAt(i + 16) != '*') {//非8列\n                        noteight();\n                        initiateEmptyChessboard();\n                        repaint();\n                        break B;\n\n                    }\n                }\n                if (chessData.get(end - 1).charAt(chessData.get(end - 1).length() - 1) == 'w') {\n                    setCurrentColor(ChessColor.BLACK);\n                } else if (chessData.get(end - 1).charAt(chessData.get(end - 1).length() - 1) == 'b') {\n                    setCurrentColor(ChessColor.WHITE);\n                } else {//无黑白方\n                    nonextfang();\n//                    initiateEmptyChessboard();\n                    repaint();\n                    break;\n\n                }\n                changelabelload();\n                break;\n//            }\n            }\n\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/Chessboard.java b/src/view/Chessboard.java
--- a/src/view/Chessboard.java	(revision b3f2ef1142471320f38c8e64c094599a6795748d)
+++ b/src/view/Chessboard.java	(date 1653390435070)
@@ -325,6 +325,7 @@
     }
 
 
+
     private void record(int fromx, int fromy, int tox, int toy) {
         StringBuilder str = new StringBuilder();
         for (int i = 0; i < 8; i++) {
